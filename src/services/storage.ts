import { ref, uploadBytes, getDownloadURL, deleteObject } from 'firebase/storage';
import { storage } from '@/lib/firebase';
import JSZip from 'jszip';

export interface ProjectFiles {
  html: string;
  css: string;
  js: string;
  projectName: string;
}

export const generateProjectZip = async (files: ProjectFiles): Promise<Blob> => {
  const zip = new JSZip();
  
  // Create the main HTML file with embedded CSS and JS
  const htmlContent = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${files.projectName}</title>
    <style>
        ${files.css}
    </style>
</head>
<body>
    ${files.html}
    
    <script>
        ${files.js}
    </script>
</body>
</html>`;

  // Add files to zip
  zip.file('index.html', htmlContent);
  
  if (files.css.trim()) {
    zip.file('styles.css', files.css);
  }
  
  if (files.js.trim()) {
    zip.file('script.js', files.js);
  }
  
  // Add a separate HTML file that references external files
  if (files.css.trim() || files.js.trim()) {
    const separateHtmlContent = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${files.projectName}</title>
    ${files.css.trim() ? '<link rel="stylesheet" href="styles.css">' : ''}
</head>
<body>
    ${files.html}
    
    ${files.js.trim() ? '<script src="script.js"></script>' : ''}
</body>
</html>`;
    
    zip.file('index-with-external-files.html', separateHtmlContent);
  }
  
  // Add README
  const readmeContent = `# ${files.projectName}

This project was generated using PromptEy - AI-powered website builder.

## Files Included

- **index.html**: Complete website with embedded CSS and JS
${files.css.trim() || files.js.trim() ? '- **index-with-external-files.html**: HTML file that references external CSS/JS files' : ''}
${files.css.trim() ? '- **styles.css**: Stylesheet' : ''}
${files.js.trim() ? '- **script.js**: JavaScript functionality' : ''}

## How to Use

1. Open **index.html** in your web browser to view the complete website
2. You can also use the separate files for development or hosting

## Generated by PromptEy

Visit [PromptEy](https://promptey.com) to create your own AI-generated websites!
`;
  
  zip.file('README.md', readmeContent);
  
  return await zip.generateAsync({ type: 'blob' });
};

export const uploadProjectZip = async (
  userId: string, 
  projectId: string, 
  files: ProjectFiles
): Promise<string> => {
  try {
    // Generate ZIP file
    const zipBlob = await generateProjectZip(files);
    
    // Create storage reference
    const fileName = `${files.projectName.replace(/[^a-zA-Z0-9]/g, '_')}_${Date.now()}.zip`;
    const storageRef = ref(storage, `projects/${userId}/${projectId}/${fileName}`);
    
    // Upload file
    const snapshot = await uploadBytes(storageRef, zipBlob);
    
    // Get download URL
    const downloadURL = await getDownloadURL(snapshot.ref);
    
    return downloadURL;
  } catch (error) {
    console.error('Error uploading project zip:', error);
    throw new Error('Failed to upload project files');
  }
};

export const deleteProjectFile = async (filePath: string): Promise<void> => {
  try {
    const fileRef = ref(storage, filePath);
    await deleteObject(fileRef);
  } catch (error) {
    console.error('Error deleting file:', error);
    throw new Error('Failed to delete file');
  }
};

export const generateAndDownloadZip = async (files: ProjectFiles): Promise<void> => {
  try {
    const zipBlob = await generateProjectZip(files);
    
    // Create download link
    const url = URL.createObjectURL(zipBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${files.projectName.replace(/[^a-zA-Z0-9]/g, '_')}.zip`;
    
    // Trigger download
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    // Clean up
    URL.revokeObjectURL(url);
  } catch (error) {
    console.error('Error generating download:', error);
    throw new Error('Failed to generate download');
  }
};